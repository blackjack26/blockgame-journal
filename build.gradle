plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
    id 'org.ajoberstar.grgit' version '5.2.2'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def lastTag = project.hasProperty("lastTag") ? project.lastTag : null
def newTag = project.hasProperty("currentTag") ? project.currentTag : "v$version"

ext {
    releaseType = {
        def type = "release"
        if (newTag.contains("-alpha")) {
            type = "alpha"
        } else if (newTag.contains("-beta") || newTag.contains("-rc") || newTag.contains("-pre")) {
            type = "beta"
        }
        return type
    }
    releaseChangelog = {
        def changes = StringBuilder.getDeclaredConstructor().newInstance();
        def commits = "git log --max-count=${project.changelog_max_commit_search} --pretty=format:\"%b\" $lastTag..$newTag".execute()
        println "Last version: $lastTag"
        println "New version: $newTag"

        commits.in.eachLine { line ->
            def processedLine = line.toString()
            if (processedLine.startsWith("\"")) {
                processedLine = processedLine.substring(1)
            }
            if (processedLine.endsWith("\"")) {
                processedLine = processedLine.substring(0, processedLine.length() - 1)
            }
            println "Reading line: $processedLine"

            if (processedLine.startsWith("- ")) {
                println "Adding changelog line:"
                println "  $processedLine"
                if (changes.length() == 0) {
                    changes << processedLine
                } else {
                    changes << "\n$processedLine"
                }
            }
        }

        commits.err.eachLine { line -> println line }
        commits.waitFor()

        println "Changelog:"
        def changelog = changes.toString().trim()
        if (changelog.isEmpty()) {
            changelog = "No Changelog Available"
        }
        println "${changelog}"

        if (!rootProject.buildDir.exists()) rootProject.buildDir.mkdirs()
        new File(rootProject.buildDir, "CHANGELOG.md").text = changelog
        return changelog
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    // Project Lombok
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Cloth Config API
    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // Mod Menu
    modApi("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/blockgamejournal.accesswidener")
}

unifiedPublishing {
    project {
        displayName = "${project.mod_name} ${newTag}"
        version = project.version
        changelog = project.releaseChangelog()
        releaseType = project.releaseType()
        gameVersions = ["1.20.2"]
        gameLoaders = ["fabric"]

        mainPublication tasks.remapJar

        relations {
            depends {
                modrinth = "fabric-api"
            }

            depends {
                modrinth = "cloth-config"
            }

            optional {
                modrinth = "modmenu"
            }
        }

        var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null && MODRINTH_TOKEN instanceof String) {
            modrinth {
                token = MODRINTH_TOKEN
                id = project.modrinth_id
            }
        }
    }
}